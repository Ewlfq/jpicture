(function ($) {
    'use strict';
    
    var findMatchingWidth = function (picList, width) {
        var minDiff = Infinity,
            retVal,
            retKey;
            
        for (var key in picList) {
            if (picList.hasOwnProperty(key)) {
                if (Math.abs(picList[key] - width) < minDiff){
                    minDiff = Math.abs(picList[key] - width);
                    retVal = picList[key];
                    retKey = key;
                }
            }
        }
        
        return { 
            width: retVal, 
            key: retKey
        };
    },
        
    fetchImg =  function (elem, url) {
        $.ajax({ 
            url : url, 
            cache: true,
            processData : false,
        }).always(function(){
            console.log(url + ' is loaded');
            $(elem).attr("src", url).fadeIn();
        }); 
    }; 
    
    $.fn.jp = function (picList) {
        if (Object.prototype.toString.call(picList) === '[object Object]') {
            this.each(function() {
                var elemWidth = $(this).width(),
                    picProperties = findMatchingWidth(picList, elemWidth);
                console.log('Element width = ' + elemWidth + ' optimal pic witdh = ' + picProperties.width);
                fetchImg(this, picProperties.key);
            });
        } else {
            console.log('Object of type [object Object] expected, object of type ' + Object.prototype.toString.call(picList) + ' given.'); 
        }
        
        return this;
    };
}(jQuery));
